<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Records</title>
    <link>https://monkback.github.io/post/</link>
    <description>Recent content in Posts on Records</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 26 Oct 2019 17:19:45 +0800</lastBuildDate>
    
	<atom:link href="https://monkback.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>621 Task Cheduler</title>
      <link>https://monkback.github.io/post/leetcode/621-task-cheduler/</link>
      <pubDate>Sat, 26 Oct 2019 17:19:45 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/leetcode/621-task-cheduler/</guid>
      <description>621-Task Scheduler 题目：Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks. Tasks could be done without original order.Each task could be done in one interval. For each interval, CPU could finish one task or just be idle. However, there is a non-negative cooling interval n that means between two</description>
    </item>
    
    <item>
      <title>647 Palindromic Substrings</title>
      <link>https://monkback.github.io/post/leetcode/647-palindromic-substrings/</link>
      <pubDate>Thu, 24 Oct 2019 17:35:13 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/leetcode/647-palindromic-substrings/</guid>
      <description>647-Palindromic Substrings 题目：Given a string, your task is to count how many palindromic substrings in this string. The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters. Example 1: Input: &amp;ldquo;abc&amp;rdquo; Output: 3 Explanation: Three palindromic strings: &amp;ldquo;a&amp;rdquo;, &amp;ldquo;b&amp;rdquo;, &amp;ldquo;c&amp;rdquo;. Example 2: Input: &amp;ldquo;aaa&amp;rdquo; Output: 6 Explanation: Six palindromic strings: &amp;ldquo;a&amp;rdquo;, &amp;ldquo;a&amp;rdquo;, &amp;ldquo;a&amp;rdquo;,</description>
    </item>
    
    <item>
      <title>算法题目</title>
      <link>https://monkback.github.io/post/leetcode/739-dailytemperatures/</link>
      <pubDate>Tue, 22 Oct 2019 20:19:40 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/leetcode/739-dailytemperatures/</guid>
      <description>739-dailyTemperatures 题目：Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76,</description>
    </item>
    
    <item>
      <title>对paxos的一些理解</title>
      <link>https://monkback.github.io/post/paxos/</link>
      <pubDate>Mon, 14 Oct 2019 10:38:40 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/paxos/</guid>
      <description>由于最近需要在组内做一个分享，而且Spring那块我还没搞完，就打算选paxos的一些问题来梳理理解一下，这也就是技术分享的最大好处，需要你</description>
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(四)</title>
      <link>https://monkback.github.io/post/spring/spring4read3/</link>
      <pubDate>Thu, 03 Oct 2019 13:22:59 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring4read3/</guid>
      <description>第七章 Spring AOP基础 Aspect Oriented Programming，我们无法通过抽象父类的方式来消除一些重复的横切代码，AOP是通过横向抽取机制来进行抽象的。AO</description>
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(三)</title>
      <link>https://monkback.github.io/post/spring/spring4read2/</link>
      <pubDate>Thu, 26 Sep 2019 23:15:06 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring4read2/</guid>
      <description>第五章 在IOC容器中装配Bean Spring启动时读取应用程序提供的Bean配置信息，并在Spring容器中生成一份相应的Bean配置注册表</description>
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(二)</title>
      <link>https://monkback.github.io/post/spring/spring4read1/</link>
      <pubDate>Sun, 22 Sep 2019 17:04:23 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring4read1/</guid>
      <description>第四章 IOC Inverse Of Control：某一接口具体实现类的选择控制权从 调用类 中移除，转交给第三方，即Spring容器(利用Bean配置来控制) 这其实是</description>
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(一)</title>
      <link>https://monkback.github.io/post/spring/spring4read/</link>
      <pubDate>Mon, 16 Sep 2019 16:35:04 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring4read/</guid>
      <description>第一章 概述 提起Spring这个框架，我们都会说到Inverse of Control和Aspect Oriented Programming，我所理解的这是两种思维</description>
    </item>
    
    <item>
      <title>NIO-1</title>
      <link>https://monkback.github.io/post/nio1/</link>
      <pubDate>Tue, 03 Sep 2019 18:10:06 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/nio1/</guid>
      <description>netty是一个用于客户端和服务器通信的高性能网络通信框架，涉及到跨机器之间的通信，必然离不开I/O，所以我们就从Java 的I/O演变之路开</description>
    </item>
    
    <item>
      <title>NIO-2</title>
      <link>https://monkback.github.io/post/nio2/</link>
      <pubDate>Tue, 03 Sep 2019 18:10:06 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/nio2/</guid>
      <description>###传统的BIO### 我们先使用一个传统的client/server模式来编写了一段两个进程之间通信的代码。ServerSocke负责绑定</description>
    </item>
    
  </channel>
</rss>