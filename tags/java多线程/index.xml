<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java多线程 on Records</title>
    <link>https://monkback.github.io/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
    <description>Recent content in Java多线程 on Records</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 27 May 2020 17:48:29 +0800</lastBuildDate>
    
	<atom:link href="https://monkback.github.io/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分布式锁的一次问题排查</title>
      <link>https://monkback.github.io/post/work/cyclicbarrier/</link>
      <pubDate>Wed, 27 May 2020 17:48:29 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/work/cyclicbarrier/</guid>
      <description>这篇文章来源于工作中发现的一个项目bug。 1、项目背景： 这是一个rpc服务，维护的是公司所有用户的基本信息，包括用户注册、修改、注销以及查询</description>
    </item>
    
    <item>
      <title>Java中的线程池</title>
      <link>https://monkback.github.io/post/juc/threadpool/</link>
      <pubDate>Mon, 18 May 2020 15:51:42 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/juc/threadpool/</guid>
      <description>ThreadPoolExecutor继承了AbstractExecutorService类，并提供了四个构造函数，实际上，其中的三个都是调用</description>
    </item>
    
    <item>
      <title>AbstractQueuedSynchronizer理解</title>
      <link>https://monkback.github.io/post/juc/abstractqueuedsynchronizer/</link>
      <pubDate>Wed, 13 May 2020 10:28:43 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/juc/abstractqueuedsynchronizer/</guid>
      <description>队列同步器AbstractQueuedSynchronizer是用来构建锁和其他同步工具的关键，我们熟知的ReentrantLock(有公平</description>
    </item>
    
    <item>
      <title>对象的初始化安全—论static和final</title>
      <link>https://monkback.github.io/post/juc/object/</link>
      <pubDate>Sun, 19 Apr 2020 18:13:56 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/juc/object/</guid>
      <description>我们知道，静态变量只会被初始化一次。事实上，一个类被JVM加载以后，该类的所有静态变量的值都是默认值(引用变量就是null ，boolean变</description>
    </item>
    
    <item>
      <title>单例模式的几种实现方式</title>
      <link>https://monkback.github.io/post/juc/singleton/</link>
      <pubDate>Sun, 19 Apr 2020 13:48:54 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/juc/singleton/</guid>
      <description>先看一下传统的double-check模式，代码如下： public class Singleton { private static volatile Singleton instance = null; private Singleton() {} public static Singleton getInstance() { if (instance == null) { synchronized (Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; } }</description>
    </item>
    
    <item>
      <title>Thread类</title>
      <link>https://monkback.github.io/post/juc/thread/</link>
      <pubDate>Tue, 14 Apr 2020 15:44:55 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/juc/thread/</guid>
      <description>最近在看一本比较基础的书《Java 多线程编程核心技术》，发现里面有一个关于Thread类的知识点，是我以前没有注意过的，比较有意思， 记录如下</description>
    </item>
    
  </channel>
</rss>