<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Records</title>
    <link>https://monkback.github.io/posts/</link>
    <description>Recent content in Posts on Records</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 22 Sep 2019 17:04:23 +0800</lastBuildDate>
    
	<atom:link href="https://monkback.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring 4.x 阅读笔记(二)</title>
      <link>https://monkback.github.io/2019/spring-4.x-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Sun, 22 Sep 2019 17:04:23 +0800</pubDate>
      
      <guid>https://monkback.github.io/2019/spring-4.x-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>读《Spring 4.x 》一书记录 第四章 IOC Inverse Of Control：某一接口具体实现类的选择控制权从 调用类 中移除，转交给第三方，即Spring容器(利用</description>
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(一)</title>
      <link>https://monkback.github.io/2019/spring-4.x-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Mon, 16 Sep 2019 16:35:04 +0800</pubDate>
      
      <guid>https://monkback.github.io/2019/spring-4.x-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>读《Spring 4.x 》一书记录 第一章 概述 提起Spring这个框架，我们都会说到Inverse of Control和Aspect Oriented Programmi</description>
    </item>
    
    <item>
      <title>NIO-1</title>
      <link>https://monkback.github.io/2019/nio-1/</link>
      <pubDate>Tue, 03 Sep 2019 18:10:06 +0800</pubDate>
      
      <guid>https://monkback.github.io/2019/nio-1/</guid>
      <description>netty是一个用于客户端和服务器通信的高性能网络通信框架，涉及到跨机器之间的通信，必然离不开I/O，所以我们就从Java 的I/O演变之路开</description>
    </item>
    
    <item>
      <title>NIO-2</title>
      <link>https://monkback.github.io/2019/nio-2/</link>
      <pubDate>Tue, 03 Sep 2019 18:10:06 +0800</pubDate>
      
      <guid>https://monkback.github.io/2019/nio-2/</guid>
      <description>###传统的BIO### 我们先使用一个传统的client/server模式来编写了一段两个进程之间通信的代码。ServerSocke负责绑定</description>
    </item>
    
  </channel>
</rss>