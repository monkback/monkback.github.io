<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Records</title>
    <link>https://monkback.github.io/</link>
    <description>Recent content on Records</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 25 Mar 2020 16:58:14 +0800</lastBuildDate>
    
        <atom:link href="https://monkback.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Bean LifeCycle</title>
      <link>https://monkback.github.io/post/spring/spring-bean-lifecycle/</link>
      <pubDate>Wed, 25 Mar 2020 16:58:14 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring-bean-lifecycle/</guid>
      
        <description>这是回顾Spring系列书籍的第二篇文章，主要分析Spring容器中Bean的生命周期，这里的Spring容器主要指BeanFactory，</description>
      
    </item>
    
    <item>
      <title>Spring容器与web容器</title>
      <link>https://monkback.github.io/post/spring/spring%E5%AE%B9%E5%99%A8%E4%B8%8Eweb%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Tue, 17 Mar 2020 20:24:24 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring%E5%AE%B9%E5%99%A8%E4%B8%8Eweb%E5%AE%B9%E5%99%A8/</guid>
      
        <description>最近回顾了一下去年看过的Spring相关的书籍，从《精通Spring 4.x 企业应用开发实战》这本书开始的，一上来我就又忘记了之前看过 的一个知识点</description>
      
    </item>
    
    <item>
      <title>2020年看书规划</title>
      <link>https://monkback.github.io/post/work/schedule/</link>
      <pubDate>Sat, 29 Feb 2020 20:22:48 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/work/schedule/</guid>
      
        <description>拒绝浪费时间，重拾看书规划，这篇文章会持续更新记录。 2020年3月开始，先花两周的时间复习一下Spring相关内容，因为之前已经花很多时间看</description>
      
    </item>
    
    <item>
      <title>ListNode相关知识</title>
      <link>https://monkback.github.io/post/algorithm/listnode/</link>
      <pubDate>Tue, 14 Jan 2020 10:52:08 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/algorithm/listnode/</guid>
      
        <description>自己算法上的知识一直都很薄弱，好些题目都是靠之前的死记硬背下来的，过段时间就忘记解法了。所以最近在看极客时间上的一个专栏《数据结构与算法之美</description>
      
    </item>
    
    <item>
      <title>Redis 分布式锁的可重入</title>
      <link>https://monkback.github.io/post/redis/redis-reentrant-lock/</link>
      <pubDate>Wed, 25 Dec 2019 15:38:33 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/redis/redis-reentrant-lock/</guid>
      
        <description>最近在看《Redis 深度历险》这本书，我们都知道Redis用来实现分布式锁是一种常用的技术方案，本质上 就是用命令setnx ex来占据一个坑位</description>
      
    </item>
    
    <item>
      <title>遇到的FastJson的一个问题</title>
      <link>https://monkback.github.io/post/work/fastjson/</link>
      <pubDate>Thu, 21 Nov 2019 20:22:13 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/work/fastjson/</guid>
      
        <description>最近在项目中遇到了一个问题，在打印日志的时候，使用了一个统一封装的框架，将一个对象A打出来。结果确发现在日志里打出来的这个对象有一些本来不应</description>
      
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(数据访问篇)</title>
      <link>https://monkback.github.io/post/spring/springdao/</link>
      <pubDate>Sun, 10 Nov 2019 17:04:12 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/springdao/</guid>
      
        <description>Spring事务管理方面，没有细看，欠缺。</description>
      
    </item>
    
    <item>
      <title>560 Subarray Sum Equals K</title>
      <link>https://monkback.github.io/post/algorithm/560-subarray-sum-equals-k/</link>
      <pubDate>Fri, 01 Nov 2019 18:12:07 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/algorithm/560-subarray-sum-equals-k/</guid>
      
        <description>560-Subarray Sum Equals K 题目：Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k. Example 1: Input:nums = [1,1,1], k = 2 Output: 2 The length of the array is in range [1, 20,000]. The range of numbers in the array is [-1000, 1000] and the range of the</description>
      
    </item>
    
    <item>
      <title>一次关于CompletionService的使用</title>
      <link>https://monkback.github.io/post/work/completionservice/</link>
      <pubDate>Thu, 31 Oct 2019 20:03:31 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/work/completionservice/</guid>
      
        <description>背景 最近在项目里需要实现这样一个接口：从多个数据源分别查询不同的数据，再将所有的结果组装在一起，返回最终结果。本身上没有什么难点，只是这一段</description>
      
    </item>
    
    <item>
      <title>621 Task Cheduler</title>
      <link>https://monkback.github.io/post/algorithm/621-task-cheduler/</link>
      <pubDate>Sat, 26 Oct 2019 17:19:45 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/algorithm/621-task-cheduler/</guid>
      
        <description>621-Task Scheduler 题目：Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks. Tasks could be done without original order.Each task could be done in one interval. For each interval, CPU could finish one task or just be idle. However, there is a non-negative cooling interval n that means between two</description>
      
    </item>
    
    <item>
      <title>647 Palindromic Substrings</title>
      <link>https://monkback.github.io/post/algorithm/647-palindromic-substrings/</link>
      <pubDate>Thu, 24 Oct 2019 17:35:13 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/algorithm/647-palindromic-substrings/</guid>
      
        <description>647-Palindromic Substrings 题目：Given a string, your task is to count how many palindromic substrings in this string. The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters. Example 1: Input: &amp;ldquo;abc&amp;rdquo; Output: 3 Explanation: Three palindromic strings: &amp;ldquo;a&amp;rdquo;, &amp;ldquo;b&amp;rdquo;, &amp;ldquo;c&amp;rdquo;. Example 2: Input: &amp;ldquo;aaa&amp;rdquo; Output: 6 Explanation: Six palindromic strings: &amp;ldquo;a&amp;rdquo;, &amp;ldquo;a&amp;rdquo;, &amp;ldquo;a&amp;rdquo;,</description>
      
    </item>
    
    <item>
      <title>739 Daily Temperatures</title>
      <link>https://monkback.github.io/post/algorithm/739-dailytemperatures/</link>
      <pubDate>Tue, 22 Oct 2019 20:19:40 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/algorithm/739-dailytemperatures/</guid>
      
        <description>739-dailyTemperatures 题目：Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76,</description>
      
    </item>
    
    <item>
      <title>对paxos的一些理解</title>
      <link>https://monkback.github.io/post/work/paxos/</link>
      <pubDate>Mon, 14 Oct 2019 10:38:40 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/work/paxos/</guid>
      
        <description>由于最近需要在组内做一个分享，而且Spring那块我还没搞完，就打算选paxos的一些问题来梳理理解一下，这也就是技术分享的最大好处，需要你</description>
      
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(五)</title>
      <link>https://monkback.github.io/post/spring/spring4read4/</link>
      <pubDate>Thu, 03 Oct 2019 13:22:59 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring4read4/</guid>
      
        <description>第八章 基于AspectJ和Schema的AOP 基于注解的方式比上一章继承扩展各种类和接口要方便多了，首推的是这种方式。</description>
      
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(四)</title>
      <link>https://monkback.github.io/post/spring/spring4read3/</link>
      <pubDate>Thu, 03 Oct 2019 13:22:59 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring4read3/</guid>
      
        <description>第七章 Spring AOP基础 Aspect Oriented Programming，我们无法通过抽象父类的方式来消除一些重复的横切代码，AOP是通过横向抽取机制来进行抽象的。AO</description>
      
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(三)</title>
      <link>https://monkback.github.io/post/spring/spring4read2/</link>
      <pubDate>Thu, 26 Sep 2019 23:15:06 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring4read2/</guid>
      
        <description>第五章 在IOC容器中装配Bean Spring启动时读取应用程序提供的Bean配置信息，并在Spring容器中生成一份相应的Bean配置注册表</description>
      
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(二)</title>
      <link>https://monkback.github.io/post/spring/spring4read1/</link>
      <pubDate>Sun, 22 Sep 2019 17:04:23 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring4read1/</guid>
      
        <description>第四章 IOC Inverse Of Control：某一接口具体实现类的选择控制权从 调用类 中移除，转交给第三方，即Spring容器(利用Bean配置来控制) 这其实是</description>
      
    </item>
    
    <item>
      <title>Spring 4.x 阅读笔记(一)</title>
      <link>https://monkback.github.io/post/spring/spring4read/</link>
      <pubDate>Mon, 16 Sep 2019 16:35:04 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/spring/spring4read/</guid>
      
        <description>第一章 概述 提起Spring这个框架，我们都会说到Inverse of Control和Aspect Oriented Programming，我所理解的这是两种思维</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://monkback.github.io/about/</link>
      <pubDate>Tue, 03 Sep 2019 18:10:06 +0800</pubDate>
      
      <guid>https://monkback.github.io/about/</guid>
      
        <description>十几年前，有过一种论调，认为 80 年代初刚改革开放随便卖什么都挣钱的时候是好时候，还有人认为 90 年代初证券业刚放开随便买什么都挣钱的时候是好时候，</description>
      
    </item>
    
    <item>
      <title>NIO-1</title>
      <link>https://monkback.github.io/post/net/nio1/</link>
      <pubDate>Tue, 03 Sep 2019 18:10:06 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/net/nio1/</guid>
      
        <description>netty是一个用于客户端和服务器通信的高性能网络通信框架，涉及到跨机器之间的通信，必然离不开I/O，所以我们就从Java 的I/O演变之路开</description>
      
    </item>
    
    <item>
      <title>NIO-2</title>
      <link>https://monkback.github.io/post/net/nio2/</link>
      <pubDate>Tue, 03 Sep 2019 18:10:06 +0800</pubDate>
      
      <guid>https://monkback.github.io/post/net/nio2/</guid>
      
        <description>###传统的BIO### 我们先使用一个传统的client/server模式来编写了一段两个进程之间通信的代码。ServerSocke负责绑定</description>
      
    </item>
    
  </channel>
</rss>
